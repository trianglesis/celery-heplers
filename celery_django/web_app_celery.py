"""
Separate Celery settings file

"""

from __future__ import absolute_import, unicode_literals
import os
import django

from celery import Celery
from kombu import Exchange

# set the default Django settings module for the 'celery' program.
os.environ.setdefault('DJANGO_SETTINGS_MODULE', '"""
Django settings for web_app project.

Generated by 'django-admin startproject' using Django 1.11.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import sys
import logging
import socket
log = logging.getLogger("web_app.applogger")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, os.path.join(BASE_DIR, 'web_app'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# noinspection SpellCheckingInspection
SECRET_KEY = 'blah-blah'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if 'productionserver' in socket.getfqdn():
    CURR_HOSTNAME = socket.getfqdn()
else:
    CURR_HOSTNAME = socket.getfqdn().replace('.dev.com', '')


ALLOWED_HOSTS = ['localhost', '127.0.0.1', CURR_HOSTNAME, socket.getfqdn()]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # 'django_celery_results',  # Disable if result_backend = 'django-db'
    'django_celery_beat',
    'bootstrap4',
    'web_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'web_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'static/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.static',
            ],
        },
    },
]

WSGI_APPLICATION = 'web_app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
# https://stackoverflow.com/questions/26958592/django-after-upgrade-mysql-server-has-gone-away
# https://stackoverflow.com/questions/16946938/django-unknown-system-variable-transaction-on-syncdb
# noinspection SpellCheckingInspection
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'web_app_database',
        'USER': 'web_app_user',
        'PASSWORD': 'web_app_user_password',
        'HOST': 'localhost',
        'PORT': '3306',
        'CONN_MAX_AGE': 3600,
        'OPTIONS': {
            'read_default_file': '/etc/my.cnf',
            # 'init_command': 'SET default_storage_engine=INNODB;'
            # 'init_command': 'SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED',
            # 'init_command': 'SET default_storage_engine=INNODB',
        },
    }
}

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATICFILES_DIRS = (
    os.path.join(STATIC_ROOT, 'admin'),
)

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# https://docs.djangoproject.com/en/2.0/topics/email/
EMAIL_HOST = 'mail.dev.com'

# Django registration:
ACCOUNT_ACTIVATION_DAYS = 7
REGISTRATION_OPEN = True

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/
LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/London'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# https://github.com/maxtepkeev/architect/issues/38
# https://github.com/celery/django-celery/issues/359
CONN_MAX_AGE = None

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# DEBUG OPT:
if os.name == "nt":
    log.debug("=========================================================")
    log.debug("PROJECT_ROOT:     %s", PROJECT_ROOT)
    log.debug("BASE DIR:         %s", BASE_DIR)
    log.debug("=========================================================")
    log.debug("TEMPLATES:        %s", TEMPLATES[0]['DIRS'][0])
    log.debug("Static root:      %s", STATIC_ROOT)
    log.debug("=========================================================")
    log.debug("SYS PATH: ", sys.path)
    log.debug("=========================================================")
    log.debug("STATICFILES_DIRS: %s", STATICFILES_DIRS)
.settings')
# Setup django project
django.setup()
#  The backend is specified via the backend argument to Celery, (or via the result_backend setting if you choose to use a configuration module):
app = Celery('web_app',
             broker='amqp://app_user:app_passwd@localhost:5672/tentacle',
             backend='amqp://app_user:app_passwd@localhost:5672/tentacle',
             )

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
# app.config_from_object('django.conf:settings', namespace='CELERY')
#  The backend is specified via the backend argument to Celery, (or via the result_backend setting if you choose to use a configuration module):

if not os.name == "nt":
    # https://github.com/celery/celery/issues/4184
    app.conf.timezone   = 'UTC'
    app.conf.enable_utc   = True

    # Load task modules from all registered Django app configs.
    app.autodiscover_tasks()

    # One for internal:
    default_exchange = Exchange('default',   type = 'direct')
    # One for tests only
    tests_exchange   = Exchange('tests_run', type = 'direct')

    app.conf.update(
        accept_content    = ['json', 'pickle', 'application/x-python', 'application/json',
                             'application/x-python-serialize'],
        task_serializer   = 'pickle',
        result_serializer = 'json',
        # Do not set! Or logic will not wait of task OK: # task_ignore_result=True,
        # http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html#django-celery-results-using-the-django-orm-cache-as-a-result-backend
        result_backend = 'db+mysql://celery_user:celery_mysql_passwd@localhost/DBNAME',


        # result_backend = 'django-db',  # Use if 'django_celery_results'
        # INFO: This added as arg to celery service in Centos init.d | BUT should be used here?
        beat_scheduler             = 'django_celery_beat.schedulers:DatabaseScheduler',
        task_default_queue         = 'default',
        task_default_exchange      = 'default',
        task_default_routing_key   = 'default',
        task_default_exchange_type = 'direct',
        task_create_missing_queues = True,

        # http://docs.celeryproject.org/en/master/userguide/configuration.html#std:setting-worker_prefetch_multiplier
        worker_prefetch_multiplier = 0,
        # worker_prefetch_multiplier = 2000,

        # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-worker_send_task_events
        worker_send_task_events = True,
        task_send_sent_event    = True,
        worker_pool_restarts    = True,

        # Maybe this should be disabled to allow workers to get ALL tasks in queue.
        # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-task_acks_late
        # http://docs.celeryproject.org/en/master/faq.html#faq-acks-late-vs-retry
        # task_acks_late = False,

        # Experimental:
        # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-result_persistent
        # result_persistent = True,
        # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-task_track_started
        task_track_started = True,

        # Can produce web errors: [Errno 104] Connection reset by peer???
        # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_pool_limit
        # https://stackoverflow.com/questions/45803728/celery-upgrade-3-1-4-1-connection-reset-by-peer
        broker_pool_limit = None,  # Keep connection always up!
        # http://docs.celeryproject.org/en/latest/userguide/configuration.html#broker-connection-timeout
        # broker_connection_timeout     = 2,
        # broker_connection_retry       = True,
        # broker_connection_max_retries = 0,
        # http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_transport_options
    )

    app.control.add_consumer(
        queue='perforce',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'perforce.*',
        destination = ['w_perforce@tentacle'])

    # Keep parsing with default queue for local and system tasks only:
    app.control.add_consumer(
        queue='parsing',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'parsing.*',
        destination = ['w_parsing@tentacle'])

    app.control.add_consumer(
        queue='routines',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'routines.*',
        destination = ['w_routines@tentacle'])

    # New:
    app.control.add_consumer(
        queue='alpha',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'alpha.*',
        destination = ['alpha@tentacle'])

    app.control.add_consumer(
        queue='beta',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'beta.*',
        destination = ['beta@tentacle'])

    app.control.add_consumer(
        queue='charlie',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'charlie.*',
        destination = ['charlie@tentacle'])

    app.control.add_consumer(
        queue='delta',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'delta.*',
        destination = ['delta@tentacle'])

    app.control.add_consumer(
        queue='echo',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'echo.*',
        destination = ['echo@tentacle'])

    app.control.add_consumer(
        queue='foxtrot',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'foxtrot.*',
        destination = ['foxtrot@tentacle'])

    # AGAIN! I SAID ADD CONSUMER!
    app.control.add_consumer(
        queue='development',
        exchange = 'tests_run',
        exchange_type = 'direct',
        routing_key   = 'development.*',
        destination = ['development@tentacle'])

    app.control.cancel_consumer(
        'default',
        destination = [
            'w_perforce@tentacle',
            'w_routines@tentacle',
            'alpha@tentacle',
            'beta@tentacle',
            'charlie@tentacle',
            'delta@tentacle',
            'echo@tentacle',
            'foxtrot@tentacle',
            'development@tentacle',
        ])

# To activate all queues and tasks are left:
# Or better use proper restart/reloas.
# app.control.inspect()
# app.control.inspect().active_queues()
